generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  name        String      @unique
  password    String
  phone       String
  bio         String?
  createdAt   DateTime    @default(now())
  address     String
  isPublisher Boolean     @default(false)
  image       String?
  Book        Book[]
  Favorite    Favorite[]
  Cart        Cart[]
  Order       Order[]
  Account     Account[]
  OrderItem   OrderItem[]
  Reading     Reading[]
}

enum Genre {
  Literary_Fiction
  Contemporary_Romance
  Crime_Thriller
  Science_Fiction
  Biography_or_Memoir
  History_or_Geography
  Young_Adult_Fiction
  Childrens_Books
  Fantasy
  Horror
  Science_or_Technology
  Self_Help_or_Psychology
  Humour
  Food_or_Cookery
  Art_or_Photography
  Sports_or_Leisure
  Travel
  Religion_or_Spirituality
  Politics_or_Current_Affairs
  Popular_Science
  Business_or_Economics
  Health_or_Wellbeing
  Parenting_or_Family
  Education_or_Reference
  Poetry_or_Plays
  Comics_or_Graphic_Novels
  Music_or_Film
  Romance
}

enum OrderStatus {
  Pending
  Processing
  Delivered
  Cancelled
}

model Book {
  id          String      @id @default(uuid())
  title       String
  price       String
  description String
  image       String?
  genre       Genre
  createdAt   DateTime    @default(now())
  language    String?
  length      String?
  releasedAt  String?
  publisherId String
  publisher   User        @relation(fields: [publisherId], references: [id])
  Author      Author      @relation(fields: [authorId], references: [id])
  authorId    String
  isReading   Boolean     @default(false)
  isFavorite  Boolean     @default(false)
  isCart      Boolean     @default(false)
  Favorite    Favorite[]
  Cart        Cart[]
  OrderItem   OrderItem[]
  Reading     Reading[]
}

model Author {
  id          String @id @default(uuid())
  name        String
  bio         String
  dob         String
  address     String
  description String
  Book        Book[]
}

model Favorite {
  id     String @id @default(uuid())
  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  book   Book   @relation(fields: [bookId], references: [id])
}

model Cart {
  id          String   @id @default(uuid())
  userId      String
  publisherId String
  bookId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [publisherId], references: [id])
  book        Book     @relation(fields: [bookId], references: [id])
}

model OrderItem {
  id          String      @id @default(uuid())
  userId      String
  publisherId String
  orderId     String
  bookId      String
  status      OrderStatus @default(Pending)
  quantity    Int
  price       Float
  user        User        @relation(fields: [userId], references: [id])
  book        Book        @relation(fields: [bookId], references: [id])
  order       Order       @relation(fields: [orderId], references: [id])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  status    OrderStatus @default(Pending)
  isPayment Boolean     @default(false)
  total     Float
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
}

// model Transaction {
//   id          String    @id @default(uuid())
//   publisherId String
//   orderItemId String
//   orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
//   user        User      @relation(fields: [publisherId], references: [id])
//   isDelivered Boolean   @default(false)
//   Order       Order?    @relation(fields: [orderId], references: [id])
//   orderId     String?
// }

model Account {
  id           String @id @default(uuid())
  publisherId  String
  totalCash    Float
  deductedCash Float
  user         User   @relation(fields: [publisherId], references: [id])
}

model AdminAccount {
  id        String @id @default(uuid())
  totalCash Float
}

model Reading {
  id     String @id @default(uuid())
  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  book   Book   @relation(fields: [bookId], references: [id])
}
